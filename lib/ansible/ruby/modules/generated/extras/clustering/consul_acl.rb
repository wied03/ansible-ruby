# See LICENSE.txt at root of repository
# GENERATED FILE - DO NOT EDIT!!
require 'ansible/ruby/modules/base'

module Ansible
  module Ruby
    module Modules
      class Consul_acl < Base
        # @return [String] a management token is required to manipulate the acl lists
        attribute :mgmt_token
        validates :mgmt_token, type: String

        # @return [:present, :absent, nil] whether the ACL pair should be present or absent, defaults to present
        attribute :state
        validates :state, inclusion: {:in=>[:present, :absent], :message=>"%{value} needs to be :present, :absent"}, allow_nil: true

        # @return [:client, :management, nil] the type of token that should be created, either management or client, defaults to client
        attribute :type
        validates :type, inclusion: {:in=>[:client, :management], :message=>"%{value} needs to be :client, :management"}, allow_nil: true

        # @return [String] the name that should be associated with the acl key, this is opaque to Consul
        attribute :name
        validates :name, type: String

        # @return [String] the token key indentifying an ACL rule set. If generated by consul this will be a UUID.
        attribute :token
        validates :token, type: String

        # @return [Array] an list of the rules that should be associated with a given token.
        attribute :rules
        validates :rules, type: Array

        # @return [String] host of the consul agent defaults to localhost
        attribute :host
        validates :host, type: String

        # @return [Fixnum] the port on which the consul agent is running
        attribute :port
        validates :port, type: Fixnum

        # @return [String] the protocol scheme on which the consul agent is running
        attribute :scheme
        validates :scheme, type: String

        # @return [TrueClass] whether to verify the tls certificate of the consul agent
        attribute :validate_certs
        validates :validate_certs, type: TrueClass
      end
    end
  end
end
