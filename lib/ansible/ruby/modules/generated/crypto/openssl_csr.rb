# frozen_string_literal: true
# See LICENSE.txt at root of repository
# GENERATED FILE - DO NOT EDIT!!
require 'ansible/ruby/modules/base'

module Ansible
  module Ruby
    module Modules
      # This module allows one to (re)generate OpenSSL certificate signing requests. It uses the pyOpenSSL python library to interact with openssl. This module supports the subjectAltName, keyUsage, extendedKeyUsage, basicConstraints and OCSP Must Staple extensions.
      class Openssl_csr < Base
        # @return [:present, :absent, nil] Whether the certificate signing request should exist or not, taking action if the state is different from what is stated.
        attribute :state
        validates :state, expression_inclusion: {:in=>[:present, :absent], :message=>"%{value} needs to be :present, :absent"}, allow_nil: true

        # @return [String, nil] Digest used when signing the certificate signing request with the private key
        attribute :digest
        validates :digest, type: String

        # @return [String] Path to the privatekey to use when signing the certificate signing request
        attribute :privatekey_path
        validates :privatekey_path, presence: true, type: String

        # @return [String, nil] The passphrase for the privatekey.
        attribute :privatekey_passphrase
        validates :privatekey_passphrase, type: String

        # @return [Integer, nil] Version of the certificate signing request
        attribute :version
        validates :version, type: Integer

        # @return [Symbol, nil] Should the certificate signing request be forced regenerated by this ansible module
        attribute :force
        validates :force, type: Symbol

        # @return [String] Name of the file into which the generated OpenSSL certificate signing request will be written
        attribute :path
        validates :path, presence: true, type: String

        # @return [Object, nil] Key/value pairs that will be present in the subject name field of the certificate signing request.,If you need to specify more than one value with the same key, use a list as value.
        attribute :subject

        # @return [String, nil] countryName field of the certificate signing request subject
        attribute :country_name
        validates :country_name, type: String

        # @return [Object, nil] stateOrProvinceName field of the certificate signing request subject
        attribute :state_or_province_name

        # @return [Object, nil] localityName field of the certificate signing request subject
        attribute :locality_name

        # @return [String, nil] organizationName field of the certificate signing request subject
        attribute :organization_name
        validates :organization_name, type: String

        # @return [Object, nil] organizationalUnitName field of the certificate signing request subject
        attribute :organizational_unit_name

        # @return [String, nil] commonName field of the certificate signing request subject
        attribute :common_name
        validates :common_name, type: String

        # @return [String, nil] emailAddress field of the certificate signing request subject
        attribute :email_address
        validates :email_address, type: String

        # @return [Array<String>, String, nil] SAN extension to attach to the certificate signing request,This can either be a 'comma separated string' or a YAML list.,Values should be prefixed by their options. (i.e., C(email), C(URI), C(DNS), C(RID), C(IP), C(dirName), C(otherName) and the ones specific to your CA),More at U(https://tools.ietf.org/html/rfc5280#section-4.2.1.6)
        attribute :subject_alt_name
        validates :subject_alt_name, type: TypeGeneric.new(String)

        # @return [Object, nil] Should the subjectAltName extension be considered as critical
        attribute :subject_alt_name_critical

        # @return [Array<String>, String, nil] This defines the purpose (e.g. encipherment, signature, certificate signing) of the key contained in the certificate.,This can either be a 'comma separated string' or a YAML list.
        attribute :key_usage
        validates :key_usage, type: TypeGeneric.new(String)

        # @return [Object, nil] Should the keyUsage extension be considered as critical
        attribute :key_usage_critical

        # @return [Array<String>, String, nil] Additional restrictions (e.g. client authentication, server authentication) on the allowed purposes for which the public key may be used.,This can either be a 'comma separated string' or a YAML list.
        attribute :extended_key_usage
        validates :extended_key_usage, type: TypeGeneric.new(String)

        # @return [Object, nil] Should the extkeyUsage extension be considered as critical
        attribute :extended_key_usage_critical

        # @return [Object, nil] Indicates basic constraints, such as if the certificate is a CA.
        attribute :basic_constraints

        # @return [Object, nil] Should the basicConstraints extension be considered as critical
        attribute :basic_constraints_critical

        # @return [Boolean, nil] Indicates that the certificate should contain the OCSP Must Staple extension (U(https://tools.ietf.org/html/rfc7633)).
        attribute :ocsp_must_staple
        validates :ocsp_must_staple, expression_inclusion: {:in=>[true, false], :message=>"%{value} needs to be true, false"}, allow_nil: true

        # @return [Object, nil] Should the OCSP Must Staple extension be considered as critical,Warning: according to the RFC, this extension should not be marked as critical, as old clients not knowing about OCSP Must Staple are required to reject such certificates (see U(https://tools.ietf.org/html/rfc7633#section-4)).
        attribute :ocsp_must_staple_critical
      end
    end
  end
end
